@startuml

!include <C4/C4>
!include <C4/C4_Context>
!include <C4/C4_Container>
!include <C4/C4_Component>

left to right direction
SHOW_PERSON_OUTLINE()

AddRelTag("sync/async", $textColor=$ARROW_FONT_COLOR, $lineColor=$ARROW_COLOR, $lineStyle=DottedLine())

title Component diagram voor de backend container voor de "Fault Tolerance" ontwerpvraag

Container(frontend, "Frontend", $techn="JS/React", $descr="Laat de pagina zien aan de gebruiker.", $tags="", $link="")

System_Ext(wiremock, "Identity Provider", "Geeft een token terug als je een geldige gebruikersnaam en wachtwoord geeft. WireMock")

Container_Boundary("key_boundary", "Backend container", $tags="") {
    ' CONTROLLERS
    Component(authController, "Autorisatie Controller", $techn="Java/Spring Boot Controller", $descr="Inloggen, account informatie, etc", $tags="", $link="")

    ' SERVICES
    Component(authService, "Autorisatie Service", $techn="Java/Spring Boot Service", $descr="Verifieert data en stuurt die op naar de oauth provider\n\nVerantwoordelijkheid: Encapsulate What Varies", $tags="", $link="")
}

SHOW_LEGEND()

frontend --> authController: 1. Stuurt request om in te loggen
authController --> authService: 2. Stuurt data door
authService --> wiremock: 3. Stuurt naam en wachtwoord naar API
wiremock --> authService: 4. Krijgt token terug
authService --> wiremock: 5. Stuurt token naar API
wiremock --> authService: 6. Krijgt rol terug
authService --> authController: 7. Stuurt rol terug
authController --> frontend: 8. Laat rol zien
authService --> frontend: Als er een fout is, stuur een UserAccessInfo object terug

@enduml